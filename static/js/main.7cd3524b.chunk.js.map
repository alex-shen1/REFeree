{"version":3,"sources":["Components/NavPanel.js","Components/Progress.js","Components/AboutPage.js","Components/Refer.js","Components/HomePage.js","firebase.js","Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["NavPanel","props","state","className","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","to","React","Component","Progress","AboutPage","Card","style","width","Body","Title","Text","variant","Refer","HomePage","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","googleProvider","auth","GoogleAuthProvider","Login","setActiveUser","user","setState","activeUser","handleGoogleLogin","signInWithPopup","getRedirectResult","then","result","catch","error","console","log","loadUserData","handleLogout","isLoggedIn","signOut","this","onClick","App","onAuthStateChanged","uid","test","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7cd3524b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Styling/Navbar.css';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from \"react-bootstrap/Nav\"\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\nclass NavPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"navpanel\">\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"#home\">REFeree</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <div>\r\n                            <Link to='/home'> Home </Link>\r\n                            <Link to='/about'>About Us</Link>\r\n                        </div>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavPanel;","import React from 'react';\r\nimport '../Styling/Progress.css';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nclass Progress extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"progressbar\">\r\n                Progress\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Progress;","import React from \"react\";\r\nimport \"../Styling/FAQ.css\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport NavPanel from './NavPanel';\r\n\r\nconst questions = {\r\n\r\n}\r\n\r\nexport default class AboutPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"faq\">\r\n                <NavPanel />\r\n                <Card style={{ width: '18rem' }}>\r\n                    <Card.Body>\r\n                        <Card.Title>FAQs</Card.Title>\r\n                        <Card.Text variant=\"primary\">How can I refer my friends?</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../Styling/Refer.css';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nclass Refer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"ref\">\r\n                Refer a friend: <br />\r\n                Email\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Refer;","// import NavPanel from \"./NavPanel\";\r\nimport Progress from \"./Progress\";\r\nimport Refer from \"./Refer\";\r\nimport NavPanel from './NavPanel';\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class HomePage extends Component {\r\n    render() {\r\n        return <div className=\"homepage\">\r\n            <NavPanel />\r\n            <Progress />\r\n            <Refer />\r\n        </div>\r\n    }\r\n}","// this code is copypasted from another thing i did\r\nimport firebase from \"firebase/app\";\r\n//these imports are what enable the function calls auth() and database()\r\nimport \"firebase/auth\"; \r\nimport \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n    authDomain: \"referee-42ffa.firebaseapp.com\",\r\n    databaseURL: \"https://referee-42ffa.firebaseio.com\",\r\n    projectId: \"referee-42ffa\",\r\n    storageBucket: \"referee-42ffa.appspot.com\",\r\n    messagingSenderId: \"527189579972\",\r\n    appId: \"1:527189579972:web:74e964b67554da94d15191\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport const auth = firebase.auth(); // i think this line doesn't do anything\r\nexport default firebase;","import React from 'react';\r\nimport '../Styling/Login.css';\r\nimport firebase from '../firebase.js';\r\nimport 'firebase/auth';\r\n\r\n\r\nimport { auth, googleProvider } from \"../firebase\"\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    setActiveUser = (user) => {\r\n        this.setState({ activeUser: user })\r\n    }\r\n\r\n    handleGoogleLogin = () => {\r\n        auth.signInWithPopup(googleProvider);\r\n        auth.getRedirectResult().then(result => {\r\n            // idk what to do with this\r\n        }).catch(error => {\r\n            console.log(error);\r\n        })\r\n\r\n        this.props.loadUserData()\r\n    }\r\n\r\n    handleLogout = () => {\r\n        console.log(\"logging out\")\r\n        this.setState({ isLoggedIn: false, activeUser: null })\r\n        auth.signOut()\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    {\r\n                        this.state.isLoggedIn\r\n                            ? <p>Hello, \"NAME\"\"</p>\r\n                            : <p>Please sign in.</p>\r\n                    }\r\n                    {\r\n                        this.state.isLoggedIn\r\n                            ? <button onClick={this.handleLogout} >Sign out</button>\r\n                            : <button onClick={this.handleGoogleLogin}>Sign in with Google</button>\r\n                    }\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NavPanel from './Components/NavPanel.js';\r\nimport Progress from './Components/Progress.js';\r\nimport AboutPage from './Components/AboutPage.js';\r\nimport HomePage from \"./Components/HomePage\"\r\nimport Login from \"./Components/Login\"\r\n\r\nimport Refer from './Components/Refer.js';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\n\r\nimport firebase from \"./firebase\"\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeUser: null, // UID of current user\r\n      isLoggedIn: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadUserData(); // run in case user is logged in, but page refreshed\r\n  }\r\n\r\n  loadUserData = () => {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        console.log(user)\r\n        this.setState({ activeUser: user.uid, isLoggedIn: true })\r\n      } else {\r\n        // console.log(\"no user\")\r\n      }\r\n    });\r\n  }\r\n\r\n  test = () => {\r\n    console.log(this.state.activeUser)\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\" render={props => {\r\n              return <Redirect to='/home' />\r\n              // console.log(this)\r\n              // console.log(this.state)\r\n              // console.log(this.state.isLoggedIn)\r\n              // console.log(props);\r\n              // return this.state.isLoggedIn ?\r\n              //   <Redirect to='/home' /> :\r\n              //   <Redirect to='/login' />\r\n            }} />\r\n            <Route exact path=\"/home\" component={HomePage} />\r\n            <Route exact path=\"/about\" component={AboutPage} />\r\n            <Route exact path=\"/login\" render={(props) =>\r\n              <Login {...props}\r\n                loadUserData={this.loadUserData}\r\n                handleGoogleLogin={this.handleGoogleLogin}\r\n                isLoggedIn={this.state.isLoggedIn}\r\n                handleLogout={this.handleLogout} />} />\r\n          </Switch>\r\n        </Router>\r\n\r\n        {/* <button onClick={this.handleGoogleLogin}>Log in w/ google</button> */}\r\n        <button onClick={this.loadUserData}>Print user</button>\r\n        {/* <button onClick={()=>auth.signOut()}>Sign out</button> */}\r\n        {/* <button onClick={this.test}>TEST</button> */}\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}